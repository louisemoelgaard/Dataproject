G2[1:10,1:10]
# NEVER (!!!!) use G[,]. It attempts to load ALL of the file backed matrix into memory.
# most efficient approach is to fill out columns. This is due to how objects are accessed.
# But filling out rows first might be fine too.
# adhoc way to fill out the matrix
for(i in 1:10){
#fill out G in a loop with some block size
}
#filling with some dummy vars.
G2[,1:10] <- matrix(0:2, ncol = 10, nrow = 1e5)
G2[1:10,1:10]
#some functions in this package can very efficiently perform calculations on FBMs, eg:
tmp_g2 = big_colstats(G2)
library(dplyr)
#save bigsnp object:
#a list with 3 elements
obj.bigsnp = list(genotypes = G2, # genotypes, FBM object
map = tibble(snp = 1:ncol(G2)), # map, i.e. SNP info
fam = tibble(FID = 1:nrow(G2))) # fam, i.e. info on individuals
#saving the bigsnp object
snp_save(obj.bigsnp)
#you can read the data with:
G3 = snp_attach("test_fbm2.rds") # OBS: READ THE .rds(!!!) object
#genotypes are then stored in the .bk file.
G3[1:10,1:10]
View(G3)
View(G3)
G3[1:10,1:10]
G3
G3$genotypes
G3$genotypes[1:10,1:10]
library(tidyverse)
set.seed(40)
M = 100
N = 100
MAF = runif(M, 0.01, 0.49)
mat = matrix(rbinom(M*N, 2, MAF), ncol=M, byrow = T)
df = as_tibble(mat)
#df
#MAF
#matrix(c(1:10), ncol=5)
set.seed(40)
h_sq = 0.2
C = 1/5*M
beta = rep(0, M)
beta[sample(M,C)] = rnorm(C, 0, sqrt(h_sq/C))
l_g = mat %*% beta
l_e = rnorm(N, 0, 1-h_sq)
l = l_g + l_e
#beta
K = 0.1
T_ = qnorm(1-K)
y = ifelse(l>=T_, 1, 0)
GWAS1 = lm(y~mat[,1])
col_non_causal = 1
col_causal = 16
plot_df =  data.frame(pheno = y,
x_non_causal = mat[,col_non_causal],
x_causal = mat[,col_causal])
ggplot(plot_df, aes(x=x_non_causal, y=pheno)) +
geom_point() +
geom_smooth(method=lm , color="black", se=FALSE, size=0.7) +
geom_segment(aes(x = 0, xend = 2, y = 0, yend = 0), color="red2", size=0.7) +
labs(x="Non casual SNP", y="Phenotype") +
theme_minimal()
ggsave("non_casual.png")
ggplot(plot_df, aes(x=x_causal, y=pheno)) +
geom_point() +
geom_smooth(method=lm , color="black", se=FALSE, size=0.7) +
geom_segment(aes(x = 0, xend = 2, y = 0, yend = 2*beta[col_causal]), color="red2", size=0.7) +
labs(x="Casual SNP", y="Phenotype") +
theme_minimal()
ggsave("casual.png")
library(bigsnpr)
M = 1e5
N = 1e5
G2 = FBM.code256(nrow = N,
ncol = M,
code = c(0L, 1L, 2L, rep(NA_integer_, 256 - 3)),
backingfile = "test_fbm4")
library(bigsnpr)
M = 1000
N = 1000
G = FBM.code256(nrow = N,
ncol = M,
code = c(0L, 1L, 2L, rep(NA_integer_, 256 - 3)),
backingfile = "test_fbm")
# Make MAF
MAF = runif(M, 0.01, 0.49)
# Make G
block_size = 1000
iterations = M/block_size
current_start = 1
for(i in 1:iterations){
current_end = current_start + block_size - 1
probs = MAF[current_start:current_end]
G[,current_start:current_end] = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
current_start = current_start + block_size }
# Make beta
h_sq = 0.5
C = 100
beta = rep(0, M)
beta[sample(M,C)] = rnorm(C, 0, sqrt(h_sq/C))
# Make liabilities
l_g = rep(0, N)
block_size = 1000
iterations = N/block_size
current_start = 1
for (i in 1:iterations){
current_end = current_start + block_size - 1
l_g[current_start:current_end] = c(sweep(sweep(G[current_start:current_end,], FUN = '-', STATS=2*MAF, MARGIN = 2), FUN='/',
STATS=sqrt(2*MAF*(1-MAF)), MARGIN = 2)  %*% beta)
current_start = current_start + block_size
}
l_e = rnorm(N, 0, sqrt(1-h_sq))
l = l_g + l_e
# Calculate who is sick
K = 0.05
T_ = qnorm(1-K)
y = ifelse(l>=T_, 1, 0)
library(dplyr)
#save bigsnp object:
obj.bigsnp = list(genotypes = G, # genotypes, FBM object
map = tibble(snp = 1:ncol(G), MAF), # map, i.e. SNP info
fam = tibble(FID = 1:nrow(G), l, l_g, y)) # fam, i.e. info on individuals
#saving the bigsnp object
snp_save(obj.bigsnp)
G3 = snp_attach("test_fbm.rds")
library(bigsnpr)
library(dplyr)
MAF = G3$map
MAF
MAF = G3$map$MAF
# Get information
G = G3$genotypes
MAF = G3$map$MAF
l = G3$fam$l
l_g = G3$fam$l_g
y = G3$fam$y
G_sweep = sweep(sweep(G2[,], FUN = '-', STATS=2*MAF, MARGIN = 2), FUN='/', STATS=sqrt(2*MAF*(1-MAF)), MARGIN = 2)
G_sweep = sweep(sweep(G[,], FUN = '-', STATS=2*MAF, MARGIN = 2), FUN='/', STATS=sqrt(2*MAF*(1-MAF)), MARGIN = 2)
G_sweep_mean = colMeans(G_sweep)
MAF_mean = MAF*2
all.equal.numeric(3, 4,
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal.numeric(c(3.1,5.4), c(3,5,3),
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal.numeric(c(3.1,5.4), c(3.5,3),
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal(c(3.1,5.4), c(3.5,3),
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal(c(3.1,5.4), c(3.5,3),
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal(c(3.1,5.4), c(3.5,3),
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
all.equal.numeric(G_sweep_mean, MAF_mean,
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
G_sweep_mean = colMeans(G_sweep)
G_sweep = sweep(sweep(G[,], FUN = '-', STATS=2*MAF, MARGIN = 2), FUN='/', STATS=sqrt(2*MAF*(1-MAF)), MARGIN = 2)
G_sweep_mean = colMeans(G_sweep)
MAF_mean = MAF*2
all.equal.numeric(G_sweep_mean, MAF_mean,
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
# Get information
G = G3$genotypes
MAF = G3$map$MAF
l = G3$fam$l
l_g = G3$fam$l_g
y = G3$fam$y
G_mean = colMeans(G)
G_mean = colMeans(G,[,])
G_mean = colMeans(G[,])
MAF_mean = MAF*2
all.equal.numeric(G_mean, MAF_mean,
tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
G_mean
G_mean[1:10]
MAF_mean[1:10]
all.equal.numeric(G_mean, MAF_mean, tolerance= .Machine$double.eps ^ 0.5, scale=NULL)
G_mean[1:10]
MAF_mean[1:10]
qqnorm(l)
mean(l)
var(l)
# Get information
G3 = snp_attach("test_fbm.rds")
# Make regressions
```{r}
# Make regressions
G = G3$genotypes
y = G3$fam$y
lms = list(rep(0, iterations))
block_size = 10
iterations = M/block_size
lapply(1:iterations, function(i) {
current_start = (i-1) * block_size + 1
current_end = current_start + block_size - 1
G_current = data.frame(G[,current_start:current_end])
lm_current = sapply(G_current, function(x)  summary(lm(y_test ~ x))$coefficients[2,1:4])
}) %>% do.call('cbind', .) %>% t(.) %>%  as_tibble(rownames = NA)
# Make regressions
G = G3$genotypes
y = G3$fam$y
lms = list(rep(0, iterations))
block_size = 10
iterations = M/block_size
lapply(1:iterations, function(i) {
current_start = (i-1) * block_size + 1
current_end = current_start + block_size - 1
G_current = data.frame(G[,current_start:current_end])
lm_current = sapply(G_current, function(x)  summary(lm(y ~ x))$coefficients[2,1:4])
}) %>% do.call('cbind', .) %>% t(.) %>%  as_tibble(rownames = NA)
# Make regressions
G = G3$genotypes
y = G3$fam$y
lms = list(rep(0, iterations))
block_size = 10
iterations = M/block_size
GWAS = lapply(1:iterations, function(i) {
current_start = (i-1) * block_size + 1
current_end = current_start + block_size - 1
G_current = data.frame(G[,current_start:current_end])
lm_current = sapply(G_current, function(x)  summary(lm(y ~ x))$coefficients[2,1:4])
}) %>% do.call('cbind', .) %>% t(.) %>%  as_tibble(rownames = NA)
GWAS[,1]
GWAS[,4]
# Bonferrari correction
alpha = 0.05
p = alpha/1000000
y = ifelse(GWAS[,4]<=p, 1, 0)
y
# Bonferrari correction
alpha = 0.05
p = alpha/1000000
Causal_estimate = ifelse(GWAS[,4]<=p, 1, 0)
# Make regressions
G = G3$genotypes
y = G3$fam$y
lms = list(rep(0, iterations))
block_size = 10
iterations = M/block_size
GWAS = lapply(1:iterations, function(i) {
current_start = (i-1) * block_size + 1
current_end = current_start + block_size - 1
G_current = data.frame(G[,current_start:current_end])
lm_current = sapply(G_current, function(x)  summary(lm(y ~ x))$coefficients[2,1:4])
}) %>% do.call('cbind', .) %>% t(.) %>%  as_tibble(rownames = NA)
# Get information
G = G3$genotypes
MAF = G3$map$MAF
l = G3$fam$l
l_g = G3$fam$l_g
y = G3$fam$y
# Check sum of y
sum(y)
# Check sum of y
sum(y)/len(y)
# Check sum of y
sum(y)/length(y)
# Check sum of y
mean(y)
GWAS
library(bigsnpr)
library(dplyr)
#M = 1e5
#N = 1e5
M = 1000
N = 1000
G = FBM.code256(nrow = N,
ncol = M,
code = c(0L, 1L, 2L, rep(NA_integer_, 256 - 3)),
backingfile = "LTFH")
G_test = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test
mean(G_test)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
mean(G_test, )
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
mean(G_test1, G_test2)
(G_test1 + G_test2)/2
round((G_test1 + G_test2)/2)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = rnorm(block_size*1000, 0,00.1)
K
#round((G_test1 + G_test2)/2)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = rnorm(1000*1000, 0,00.1)
K
#round((G_test1 + G_test2)/2)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = rnorm(1000*1000, 0,00.1)
k
#round((G_test1 + G_test2)/2)
round((G_test1 + G_test2)/2 - k)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), nrow(1000))
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), nrow=1000)
k
round((G_test1 + G_test2)/2 - k)
(G_test1 + G_test2)/2 - k
(G_test1 + G_test2-k)/2
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
k
(G_test1 + G_test2)/ - k
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
b = (G_test1 + G_test2)/ - k
b
b = (G_test1 + G_test2)/2 - k
(G_test1 + G_test2)/2 - k
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
(G_test1 + G_test2)/2 - k
dim(k)
dim(G_test1 + G_test2)/2)
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
dim(k)
b = G_test1 + G_test2)/2
G_test1 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(block_size*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
dim(k)
b = (G_test1 + G_test2)/2
dim(b)
(G_test1 + G_test2)/2 - k
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=block_size, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
dim(k)
b = (G_test1 + G_test2)/2
dim(b)
(G_test1 + G_test2)/2 - k
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=block_size, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=block_size, nrow=1000)
dim(b)
dim(G_test1)
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 00.1), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
(G_test1 + G_test2)/2 - k
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
a = round((G_test1 + G_test2)/2 - k)
a
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
a = round((G_test1 + G_test2)/2 - k)
a[1:10,]
G_test1[1:10,]
G_test2[1:10,]
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
a = round((G_test1 + G_test2)/2 - k)
a[1:10,1]
G_test1[1:10,1]
G_test2[1:10,1]
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
a = round((G_test1 + G_test2)/2 - k)
a[1:10,1]
k[1:10,1]
G_test1[1:10,1]
G_test2[1:10,1]
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
dim(k)
dim(G_test1)
b = (G_test1 + G_test2)/2
dim(b)
a = round((G_test1 + G_test2)/2 - k)
a[1:10,1]
k[1:10,1]
G_test1[1:10,1]
G_test2[1:10,1]
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
a = round((G_test1 + G_test2)/2 - k)
test = matrix(0, 10, 10)
test
G_test1 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
G_test2 = matrix(rbinom(1000*1000, 2, probs), ncol=1000, nrow=1000)
k = matrix(rnorm(1000*1000, 0, 0.0000001), ncol=1000, nrow=1000)
a = round((G_test1 + G_test2)/2 - k)
test = matrix(0, 10, 10)
test[5,5] = matrix(10, 5, 5)
matrix(10, 5, 5)
test = matrix(0, 10, 10)
test[:5,:5] = matrix(10, 5, 5)
test = matrix(0, 10, 10)
test[1:5,1:5] = matrix(10, 5, 5)
test
library(bigsnpr)
library(dplyr)
#M = 1e5
#N = 1e5
M = 1000
N = 1000
G = FBM.code256(nrow = N,
ncol = M,
code = c(0L, 1L, 2L, rep(NA_integer_, 256 - 3)),
backingfile = "LTFH")
M = 1000
library(bigsnpr)
library(dplyr)
#M = 1e5
#N = 1e5
M = 1000
N = 1000
G = FBM.code256(nrow = N,
ncol = M,
code = c(0L, 1L, 2L, rep(NA_integer_, 256 - 3)),
backingfile = "LTFH")
# Make MAF
MAF = runif(M, 0.01, 0.49)
# Make beta
h_sq = 0.5
C = 100
beta = rep(0, M)
beta[sample(M,C)] = rnorm(C, 0, sqrt(h_sq/C))
# Make G
block_size = 10
iterations = M/block_size
current_start = 1
for(i in 1:iterations){
current_end = current_start + block_size - 1
probs = MAF[current_start:current_end]
G1 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
G2 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
k = matrix(rnorm(block_size*N, 0, 0.0000001), ncol=block_size, nrow=N)
G[,current_start:current_end] = round((G_test1 + G_test2)/2 - k)
current_start = current_start + block_size }
# Make MAF
MAF = runif(M, 0.01, 0.49)
# Make beta
h_sq = 0.5
C = 100
beta = rep(0, M)
beta[sample(M,C)] = rnorm(C, 0, sqrt(h_sq/C))
# Make G
block_size = 10
iterations = M/block_size
current_start = 1
for(i in 1:iterations){
current_end = current_start + block_size - 1
probs = MAF[current_start:current_end]
G1 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
G2 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
k = matrix(rnorm(block_size*N, 0, 0.0000001), ncol=block_size, nrow=N)
dim(G2)
G[,current_start:current_end] = round((G1 + G2)/2 - k)
current_start = current_start + block_size }
G
G[1:100,1:100]
# Make MAF
MAF = runif(M, 0.01, 0.49)
# Make beta
h_sq = 0.5
C = 100
beta = rep(0, M)
beta[sample(M,C)] = rnorm(C, 0, sqrt(h_sq/C))
# Make G
block_size = 10
iterations = M/block_size
current_start = 1
for(i in 1:iterations){
current_end = current_start + block_size - 1
probs = MAF[current_start:current_end]
G1 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
G2 = matrix(rbinom(block_size*N, 2, probs), ncol=block_size, nrow=N)
k = matrix(rnorm(block_size*N, 0, 0.0000001), ncol=block_size, nrow=N)
G[,current_start:current_end] = round((G1 + G2)/2 - k)
current_start = current_start + block_size }

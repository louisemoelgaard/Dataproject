Gibb_notrunc <- function(covmat, N, T_ = 0.05){
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N-1, ncol = k)
for (i in 1:(N-1)) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% liabil[i,-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
liabil[i,j] = rnorm(1, mu, sqrt(sigma))
}
liabil[i+1,] = liabil[i,]
}
return(list('liabilities'=liabil, 'mean'=mu_vec))
}
test2 = Gibb_notrunc(get_cov(0.5), 3000)
cov(test2[[1]])
mean(test$liabilities[,1])
plot(test$liabilities[,2], test$liabilities[,3])
calc_distribution(get_cov(0.5))
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
sigma_bar = sigma[i,i] - sigma[i , -i] %*% solve(sigma[-i , -i]) %*% sigma[-i , i]
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5))
get_cov = function(h2, n_sib = 0) {
cov <- matrix(h2/2, 4 + n_sib, 4 + n_sib)
diag(cov) <- 1
cov[3,4] <- cov[4,3] <- 0
cov[1:2, 1] <- cov[1, 1:2] <- h2
cov
}
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
sigma_bar = sigma[i,i] - sigma[i , -i] %*% solve(sigma[-i , -i]) %*% sigma[-i , i]
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5))
bounds <- function(phenos,N, T_ = 0.05){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
bounds(c(0,1,1), 10)
# Vores gibb sampler
Gibb <- function(covmat, phenos, N, T_ = 0.05){
bounds = bounds(phenos, N, T_)
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N, ncol = k)
current_liabil = rep(0, k)
for (i in 1:N) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% current_liabil[-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
current_liabil[j] = qnorm(bounds[i,j], mu, sqrt(sigma))
}
liabil[i,] = current_liabil
}
return(list('liabilities'=liabil, 'mu'=mu_vec))
}
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
par(mfrow=c(2,2))
plot(test$mu[,1], type='l')
plot(test$mu[,2], type='l')
plot(test$mu[,3], type='l')
plot(test$mu[,4], type='l')
cov(test[[1]])
Gibb_notrunc <- function(covmat, N, T_ = 0.05){
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N-1, ncol = k)
for (i in 1:(N-1)) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% liabil[i,-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
liabil[i,j] = rnorm(1, mu, sqrt(sigma))
}
liabil[i+1,] = liabil[i,]
}
return(list('liabilities'=liabil, 'mean'=mu_vec))
}
test2 = Gibb_notrunc(get_cov(0.5), 3000)
cov(test2[[1]])
mean(test$liabilities[,1])
plot(test$liabilities[,2], test$liabilities[,3])
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
plot(test$liabilities[,2], test$liabilities[,3])
bounds <- function(phenos,N, T_ = 0.05){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,1])
hist(b[,2])
bounds <- function(phenos,N, T_ = 0.05){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,3])
bounds <- function(phenos,N, T_ = 0.5){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,3])
bounds <- function(phenos,N, T_ = 0.5){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,2])
# Vores gibb sampler
Gibb <- function(covmat, phenos, N, T_ = 0.05){
bounds = bounds(phenos, N, T_)
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N, ncol = k)
current_liabil = rep(0, k)
for (i in 1:N) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = sum(mu_mult*current_liabil[-j]) # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
current_liabil[j] = qnorm(bounds[i,j], mu, sqrt(sigma))
}
liabil[i,] = current_liabil
}
return(list('liabilities'=liabil, 'mu'=mu_vec))
}
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
mean(test$liabilities[,1])
const_list[[j]]$sigma
get_cov = function(h2, n_sib = 0) {
cov <- matrix(h2/2, 4 + n_sib, 4 + n_sib)
diag(cov) <- 1
cov[3,4] <- cov[4,3] <- 0
cov[1:2, 1] <- cov[1, 1:2] <- h2
cov
}
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
sigma_bar = sigma[i,i] - sigma[i , -i] %*% solve(sigma[-i , -i]) %*% sigma[-i , i]
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5))
bounds <- function(phenos,N, T_ = 0.5){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,2])
# Vores gibb sampler
Gibb <- function(covmat, phenos, N, T_ = 0.05){
bound = bounds(phenos, N, T_)
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N, ncol = k)
current_liabil = rep(0, k)
for (i in 1:N) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = sum(mu_mult*current_liabil[-j]) # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
current_liabil[j] = qnorm(bound[i,j], mu, sqrt(sigma))
}
liabil[i,] = current_liabil
}
return(list('liabilities'=liabil, 'mu'=mu_vec))
}
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
par(mfrow=c(2,2))
plot(test$mu[,1], type='l')
plot(test$mu[,2], type='l')
plot(test$mu[,3], type='l')
plot(test$mu[,4], type='l')
cov(test[[1]])
Gibb_notrunc <- function(covmat, N, T_ = 0.05){
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N-1, ncol = k)
for (i in 1:(N-1)) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% liabil[i,-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
liabil[i,j] = rnorm(1, mu, sqrt(sigma))
}
liabil[i+1,] = liabil[i,]
}
return(list('liabilities'=liabil, 'mean'=mu_vec))
}
test2 = Gibb_notrunc(get_cov(0.5), 3000)
cov(test2[[1]])
mean(test$liabilities[,1])
plot(test$liabilities[,2], test$liabilities[,3])
var()
get_cov(0.5)[-1,1]
get_cov = function(h2, n_sib = 0) {
cov <- matrix(h2/2, 4 + n_sib, 4 + n_sib)
diag(cov) <- 1
cov[3,4] <- cov[4,3] <- 0
cov[1:2, 1] <- cov[1, 1:2] <- h2
cov
}
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
sigma_bar = sigma[i,i] - sum(mu_mult_bar*sigma[-i , i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5)[-1,1])
get_cov = function(h2, n_sib = 0) {
cov <- matrix(h2/2, 4 + n_sib, 4 + n_sib)
diag(cov) <- 1
cov[3,4] <- cov[4,3] <- 0
cov[1:2, 1] <- cov[1, 1:2] <- h2
cov
}
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
sigma_bar = sigma[i,i] - sum(mu_mult_bar*sigma[-i , i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5))
bounds <- function(phenos,N, T_ = 0.5){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,2])
# Vores gibb sampler
Gibb <- function(covmat, phenos, N, T_ = 0.05){
bound = bounds(phenos, N, T_)
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N, ncol = k)
current_liabil = rep(0, k)
for (i in 1:N) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = sum(mu_mult*current_liabil[-j]) # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
current_liabil[j] = qnorm(bound[i,j], mu, sqrt(sigma))
}
liabil[i,] = current_liabil
}
return(list('liabilities'=liabil, 'mu'=mu_vec))
}
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
par(mfrow=c(2,2))
plot(test$mu[,1], type='l')
plot(test$mu[,2], type='l')
plot(test$mu[,3], type='l')
plot(test$mu[,4], type='l')
cov(test[[1]])
Gibb_notrunc <- function(covmat, N, T_ = 0.05){
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N-1, ncol = k)
for (i in 1:(N-1)) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% liabil[i,-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
liabil[i,j] = rnorm(1, mu, sqrt(sigma))
}
liabil[i+1,] = liabil[i,]
}
return(list('liabilities'=liabil, 'mean'=mu_vec))
}
test2 = Gibb_notrunc(get_cov(0.5), 3000)
cov(test2[[1]])
mean(test$liabilities[,1])
plot(test$liabilities[,2], test$liabilities[,3])
var()
get_cov = function(h2, n_sib = 0) {
cov <- matrix(h2/2, 4 + n_sib, 4 + n_sib)
diag(cov) <- 1
cov[3,4] <- cov[4,3] <- 0
cov[1:2, 1] <- cov[1, 1:2] <- h2
cov
}
calc_distribution = function(sigma){
out = list()
for (i in 1:nrow(sigma)){
mu_mult_bar = solve(sigma[ -i, -i], sigma[i , -i])
sigma_bar = sigma[i,i] - sum(mu_mult_bar*sigma[-i , i])
out[[i]] = list('sigma'=sigma_bar, 'mu_mult'=mu_mult_bar)
}
return(out)
}
calc_distribution(get_cov(0.5))
bounds <- function(phenos,N, T_ = 0.5){
interval_2 = c(0, 1-T_)
interval_1 = c(1-T_, 1)
k = length(phenos)+1
out = matrix(c(0,1), ncol=2, nrow=k, byrow=T)
i = 2
for (phen in phenos){
interval = phen * interval_1 + (1-phen)*interval_2
out[i,] = interval
i = i+1
}
q = matrix(runif(N*k, out[,1], out[,2]), ncol=k, byrow=T)
return(q)
}
b = bounds(c(0,1,1), 1000)
hist(b[,2])
# Vores gibb sampler
Gibb <- function(covmat, phenos, N, T_ = 0.05){
bound = bounds(phenos, N, T_)
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N, ncol = k)
current_liabil = rep(0, k)
for (i in 1:N) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = sum(mu_mult*current_liabil[-j]) # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
current_liabil[j] = qnorm(bound[i,j], mu, sqrt(sigma))
}
liabil[i,] = current_liabil
}
return(list('liabilities'=liabil, 'mu'=mu_vec))
}
covmat = get_cov(0.5)
test = Gibb(covmat, c(1,1,1) , 3000)
par(mfrow=c(2,2))
plot(test$liabilities[,1], type='l')
plot(test$liabilities[,2], type='l')
plot(test$liabilities[,3], type='l')
plot(test$liabilities[,4], type='l')
par(mfrow=c(2,2))
plot(test$mu[,1], type='l')
plot(test$mu[,2], type='l')
plot(test$mu[,3], type='l')
plot(test$mu[,4], type='l')
cov(test[[1]])
Gibb_notrunc <- function(covmat, N, T_ = 0.05){
k = nrow(covmat)
const_list = calc_distribution(covmat)
liabil = matrix(0, nrow = N, ncol = k) # i formen c(l_g, l, l_p1, l_p2)
mu_vec = matrix(0, nrow = N-1, ncol = k)
for (i in 1:(N-1)) {
for (j in 1:k) {
# Udregner parametre
sigma = const_list[[j]]$sigma
mu_mult = const_list[[j]]$mu_mult
mu = mu_mult %*% liabil[i,-j] # Udelukker den liability vi er kommet til
mu_vec[i,j] = mu
liabil[i,j] = rnorm(1, mu, sqrt(sigma))
}
liabil[i+1,] = liabil[i,]
}
return(list('liabilities'=liabil, 'mean'=mu_vec))
}
test2 = Gibb_notrunc(get_cov(0.5), 3000)
cov(test2[[1]])
mean(test$liabilities[,1])
plot(test$liabilities[,2], test$liabilities[,3])
var()
